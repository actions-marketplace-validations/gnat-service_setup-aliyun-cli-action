#!/usr/bin/env node

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const defaultValues = require('./.default-keys.json');

const temp = fs.readFileSync(path.join(__dirname, '.action.yml.tmp')).toString();
const dist = path.join(process.cwd(), 'action.yml');

const [indent = 2] = process.argv.slice(2);

const getIndentHead = (indent) => {
    const tp = typeof indent;
    if (tp === 'string') {
        return indent;
    }
    return ' '.repeat(indent);
};

const formatYamlLines = (obj, indentStr = '  ', indentSize = 0) => {
    const indentHead = indentStr.repeat(indentSize);
    return Object.keys(obj)
        .map((key) => {
            const yamlKey = `${indentHead}${key}:`;
            const val = obj[key];
            const vtp = typeof val;
            if (val && vtp === 'object') {
                return `${yamlKey}\n${formatYamlLines(val, indentStr, indentSize + 1)}`;
            }

            if (vtp === 'string') {
                return `${yamlKey} '${val}'`;
            }
            return `${yamlKey} ${val}`;
        })
        .join('\n');
};

exec('aliyun configure set --help', (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return;
    }

    const [description, ...lines] = stdout.split('\n').map(s => s.trimEnd());
    const keys = [];

    const flags = lines.slice(lines.findIndex(s => s === 'Flags:') + 1, -3)
        .map((line) => {
            const [, key, , description] = line.match(/^\s+\-\-([^,\s]+)(,\-\w)?\s+(.+)/);
            if (keys.includes(key)) {
                return;
            }
            keys.push(key);

            return {
                key,
                required: false,
                ...defaultValues[key],
                description,
            };
        })
        .filter(n => n);
    const inputs = flags.map((flag) => {
            const { key, ...conf } = flag;
            return formatYamlLines({ [key]: conf }, getIndentHead(indent), 1);
        })
        .join('\n');

    const params = flags.map((flag) => {
        const { key } = flag;
        return `$(filter ${key} \${{ inputs.${key} }})`;
    })
    .join(' ');

    const content = temp.replace('${{description}}', description)
        .replace('${{inputs}}', `\n${inputs}`)
        .replace('${{params}}', `"${params}"`);

    fs.writeFileSync(dist, content);
});
