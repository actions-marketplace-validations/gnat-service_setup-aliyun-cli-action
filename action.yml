name: gnat-service/setup-aliyun-cli-action
description: set config in non interactive mode
inputs:
  version:
    description: Aliyun cli version
    required: false
    default: ''
  platform:
    description: OS platform
    required: false
    default: 'amd64'
  dry-run:
    description: Dry run
    required: false
    default: 'false'

  mode:
    required: false
    default: 'AK'
    description: 'use `--mode {AK|StsToken|RamRoleArn|EcsRamRole|RsaKeyPair|RamRoleArnWithRoleName}` to assign authenticate mode'
  profile:
    required: false
    default: 'default'
    description: 'use `--profile <profileName>` to select profile'
  language:
    required: false
    description: 'use `--language [en|zh]` to assign language'
  region:
    required: true
    description: 'use `--region <regionId>` to assign region'
  config-path:
    required: false
    description: 'use `--config-path` to specify the configuration file path'
  access-key-id:
    required: false
    description: 'use `--access-key-id <AccessKeyId>` to assign AccessKeyId, required in AK/StsToken/RamRoleArn mode'
  access-key-secret:
    required: false
    description: 'use `--access-key-secret <AccessKeySecret>` to assign AccessKeySecret'
  sts-token:
    required: false
    description: 'use `--sts-token <StsToken>` to assign StsToken'
  sts-region:
    required: false
    description: 'use `--sts-region <StsRegion>` to assign StsRegion'
  ram-role-name:
    required: false
    description: 'use `--ram-role-name <RamRoleName>` to assign RamRoleName'
  ram-role-arn:
    required: false
    description: 'use `--ram-role-arn <RamRoleArn>` to assign RamRoleArn'
  role-session-name:
    required: false
    description: 'use `--role-session-name <RoleSessionName>` to assign RoleSessionName'
  private-key:
    required: false
    description: 'use `--private-key <PrivateKey>` to assign RSA PrivateKey'
  key-pair-name:
    required: false
    description: 'use `--key-pair-name <KeyPairName>` to assign KeyPairName'
  read-timeout:
    required: false
    description: 'use `--read-timeout <seconds>` to set I/O timeout(seconds)'
  connect-timeout:
    required: false
    description: 'use `--connect-timeout <seconds>` to set connect timeout(seconds)'
  retry-count:
    required: false
    description: 'use `--retry-count <count>` to set retry count'
  skip-secure-verify:
    required: false
    description: 'use `--skip-secure-verify` to skip https certification validate [Not recommended]'
  expired-seconds:
    required: false
    description: 'use `--expired-seconds <seconds>` to specify expiration time'
  process-command:
    required: false
    description: 'use `--process-command <ProcessCommand>` to specify external program execution command'
  help:
    required: false
    description: 'print help'
runs:
  using: "composite"
  steps:
    - id: download-aliyun-cli
      shell: bash
      run: |
        if [[ -n "${{ inputs.version }}" ]]; then
          echo "Downloading Aliyun cli version {{ inputs.version }}"
          curl -LO https://github.com/aliyun/aliyun-cli/releases/download/v${{ inputs.version }}/aliyun-cli-linux-${{ inputs.version }}-${{ inputs.platform }}.tgz
          tar -xzvf aliyun-cli-linux-${{ inputs.version }}-${{ inputs.platform }}.tgz
          mv aliyun /usr/local/bin/
        else
          echo "No version specified, skip downloading. Current version is $(aliyun version)"
        fi
    - id: setup-aliyun-cli
      shell: bash
      run: |
        filter() {
          if [[ -n "$2" ]]; then
            if [[ "$2" = "true" ]]; then
              echo "\
                --$1"
            elif [[ "$2" != "false" ]];then
              echo "\
                --$1 $2"
            fi
          fi
        }
        PARAMS="$(filter mode ${{ inputs.mode }}) $(filter profile ${{ inputs.profile }}) $(filter language ${{ inputs.language }}) $(filter region ${{ inputs.region }}) $(filter config-path ${{ inputs.config-path }}) $(filter access-key-id ${{ inputs.access-key-id }}) $(filter access-key-secret ${{ inputs.access-key-secret }}) $(filter sts-token ${{ inputs.sts-token }}) $(filter sts-region ${{ inputs.sts-region }}) $(filter ram-role-name ${{ inputs.ram-role-name }}) $(filter ram-role-arn ${{ inputs.ram-role-arn }}) $(filter role-session-name ${{ inputs.role-session-name }}) $(filter private-key ${{ inputs.private-key }}) $(filter key-pair-name ${{ inputs.key-pair-name }}) $(filter read-timeout ${{ inputs.read-timeout }}) $(filter connect-timeout ${{ inputs.connect-timeout }}) $(filter retry-count ${{ inputs.retry-count }}) $(filter skip-secure-verify ${{ inputs.skip-secure-verify }}) $(filter expired-seconds ${{ inputs.expired-seconds }}) $(filter process-command ${{ inputs.process-command }}) $(filter help ${{ inputs.help }})"
        if [[ '${{ inputs.dry-run }}' = 'true' ]]; then
          echo "aliyun configure set $PARAMS"
        else
          aliyun configure set $PARAMS
        fi
branding:
  icon: 'award'
  color: 'green'
